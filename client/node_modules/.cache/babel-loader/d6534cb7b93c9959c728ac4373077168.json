{"ast":null,"code":"var _jsxFileName = \"/Users/codeclanstudent/codeclan_work/week_14/finalproject/JS-JAVA-Freelancer-App/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Config from './config/Config';\nimport Header from \"./containers/Header/Header\";\nimport SearchJob from \"./components/SearchJob/SearchJob\";\nimport JobsList from \"./components/JobItem/JobItem\";\nimport Footer from \"./containers/Footer/Footer\";\nimport { Container } from \"react-bootstrap\";\nimport Job from './components/Jobs/Job';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const baseUrl = {\n    github: \"https://jobs.github.com/positions.json\"\n  };\n  const [jobs, setJobs] = useState([]);\n  const [job, setJob] = useState({\n    title: \"\",\n    location: \"\"\n  });\n  const initialReqUrlRender = useRef(true);\n  useEffect(() => {\n    if (initialReqUrlRender.current) {\n      initialReqUrlRender.current = false;\n      getJobs(job);\n    } else {\n      getJobs(job);\n    }\n  }, [job]);\n\n  const getJobs = async job => {\n    // Github\n    const realReqUrl = `${Config.sitesConfig.github.url}?description=${job.title}&location=${job.location}`;\n    console.log('githuburl', realReqUrl);\n    let response = await fetch(realReqUrl, {\n      method: \"GET\",\n      headers: {\n        \"X-Requested-With\": \"XMLHttpRequest\"\n      }\n    });\n    let data = await response.json();\n    let formattedData = formatData(data, 'gitHub');\n    let jobs = formattedData;\n    setJobs(formattedData);\n  };\n\n  const formatData = (data, site) => {\n    const newData = data.map(data => formatGithubData(data, site));\n    console.log(newData);\n    return newData;\n  };\n\n  const formatGithubData = (data, site) => {\n    const formattedData = {};\n\n    if (site === 'github') {\n      Object.assign(formattedData, {\n        from: \"github\",\n        id: data.id,\n        title: data.title,\n        location: data.location,\n        company: data.company,\n        created_at: data.created_at,\n        url: data.url\n      });\n    }\n\n    return formattedData;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(SearchJob, {\n        updateJobDetail: setJob\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(JobsList, {\n        jobs: jobs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/YpigB0ukR9/X3/MdXmPaVjccE4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/codeclanstudent/codeclan_work/week_14/finalproject/JS-JAVA-Freelancer-App/client/src/App.js"],"names":["React","useState","useEffect","useRef","Config","Header","SearchJob","JobsList","Footer","Container","Job","App","baseUrl","github","jobs","setJobs","job","setJob","title","location","initialReqUrlRender","current","getJobs","realReqUrl","sitesConfig","url","console","log","response","fetch","method","headers","data","json","formattedData","formatData","site","newData","map","formatGithubData","Object","assign","from","id","company","created_at"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Config from './config/Config';\nimport Header from \"./containers/Header/Header\";\nimport SearchJob from \"./components/SearchJob/SearchJob\";\nimport JobsList from \"./components/JobItem/JobItem\";\nimport Footer from \"./containers/Footer/Footer\";\nimport { Container } from \"react-bootstrap\";\nimport Job from './components/Jobs/Job';\n\n\nfunction App() {\n  const baseUrl = {\n    github: \"https://jobs.github.com/positions.json\"\n  }\n  const [jobs, setJobs] = useState([]);\n  const [job, setJob] = useState({\n    title: \"\",\n    location: \"\"\n  })\n  const initialReqUrlRender = useRef(true);\n  useEffect(() => {\n    if (initialReqUrlRender.current){\n      initialReqUrlRender.current = false;\n      getJobs(job)\n    } else {\n      getJobs(job);\n    }\n  }, [job]);\n\n  const getJobs = async (job) => {\n    // Github\n    const realReqUrl = `${Config.sitesConfig.github.url}?description=${job.title}&location=${job.location}`\n    console.log('githuburl', realReqUrl)\n    let response = await fetch(realReqUrl, {\n      method: \"GET\",\n      headers: { \"X-Requested-With\": \"XMLHttpRequest\" }  \n    });\n    let data = await response.json();\n    let formattedData = formatData(data, 'gitHub')\n    let jobs = formattedData\n    setJobs(formattedData)\n  };\n\n  const formatData = (data, site) => {\n    const newData = data.map(data => formatGithubData(data, site))\n    console.log(newData)\n    return newData\n  }\n\n  const formatGithubData = (data, site) => {\n    const formattedData = {}\n    if (site === 'github'){\n      Object.assign(formattedData,{\n        from: \"github\",\n        id: data.id,\n        title: data.title,\n        location: data.location,\n        company: data.company,\n        created_at: data.created_at,\n        url: data.url\n      })\n    }\n    return formattedData\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Container>\n        <SearchJob updateJobDetail={setJob} />\n        <JobsList jobs={jobs} />\n      </Container>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}