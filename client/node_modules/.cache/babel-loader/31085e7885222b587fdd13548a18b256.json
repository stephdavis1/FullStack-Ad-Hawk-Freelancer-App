{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer, useEffect } from 'react';\nimport axios from 'axios';\nconst actions = {\n  make_request: 'make-request',\n  get_data: 'get-data',\n  error: 'error'\n};\nconst baseUrl = 'http://localhost:8080/jobs/myjobs';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case actions.make_request:\n      return {\n        loading: true,\n        jobs: []\n      };\n\n    case actions.get_data:\n      return { ...state,\n        loading: false,\n        jobs: action.payload.jobs\n      };\n\n    case actions.error:\n      return { ...state,\n        loading: false,\n        error: action.payload.error,\n        jobs: []\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default function useFetchJobs(params, page) {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, {\n    jobs: [],\n    loading: true\n  });\n\n  const filterDescription = (description, state) => {\n    if (description !== \"\") {\n      // make a copy of the state\n      let stateCopy = { ...state\n      }; // filter out the state.jobs.description based on params.description\n\n      stateCopy.jobs = stateCopy.jobs.filter(job => {\n        return job.title.includes(description);\n      }); // save filter results back to state copy\n\n      console.log(\"stateCopy\", stateCopy);\n      console.log(\"update_has_next_page\", actions.update_has_next_page);\n      return stateCopy;\n    }\n\n    return state;\n  };\n\n  const filterLocation = (location, state) => {\n    if (location !== \"\") {\n      // make a copy of the state\n      let stateCopy = { ...state\n      }; // filter out the state.jobs.description based on params.description\n\n      stateCopy.jobs = stateCopy.jobs.filter(job => {\n        return job.location.includes(location);\n      }); // save filter results back to state copy\n\n      console.log(stateCopy);\n      return stateCopy;\n    }\n\n    return state;\n  };\n\n  useEffect(() => {\n    const cancelToken1 = axios.CancelToken.source();\n    dispatch({\n      type: actions.make_request\n    });\n    axios.get(baseUrl, {\n      cancelToken: cancelToken1.token,\n      params: {\n        markdown: true,\n        page: page,\n        ...params\n      }\n    }).then(res => {\n      dispatch({\n        type: actions.get_data,\n        payload: {\n          jobs: res.data\n        }\n      });\n    }).catch(e => {\n      if (axios.isCancel(e)) return;\n      dispatch({\n        type: actions.error,\n        payload: {\n          error: e\n        }\n      });\n    });\n    return () => {\n      cancelToken1.cancel();\n    };\n  }, [params]);\n  let descriptionFiltered = filterDescription(params.description, state);\n  let locationFiltered = filterLocation(params.location, descriptionFiltered);\n  return locationFiltered;\n}\n\n_s(useFetchJobs, \"bRLgDQdNj1tsVgoBhwCNrWgJPwM=\");","map":{"version":3,"sources":["/Users/codeclanstudent/codeclan_work/week_14/JS-JAVA-Freelancer-App/client/src/components/Joblists/useAcceptedJobs.js"],"names":["useReducer","useEffect","axios","actions","make_request","get_data","error","baseUrl","reducer","state","action","type","loading","jobs","payload","useFetchJobs","params","page","dispatch","filterDescription","description","stateCopy","filter","job","title","includes","console","log","update_has_next_page","filterLocation","location","cancelToken1","CancelToken","source","get","cancelToken","token","markdown","then","res","data","catch","e","isCancel","cancel","descriptionFiltered","locationFiltered"],"mappings":"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","sourcesContent":["import { useReducer, useEffect } from 'react';\nimport axios from 'axios';\nconst actions = {\n    make_request: 'make-request',\n    get_data: 'get-data',\n    error: 'error',\n}\nconst baseUrl = 'http://localhost:8080/jobs/myjobs'\nfunction reducer(state, action) {\n    switch (action.type) {\n        case actions.make_request:\n            return { loading: true, jobs: [], }\n        case actions.get_data:\n            return { ...state, loading: false, jobs: action.payload.jobs }\n        case actions.error:\n            return { ...state, loading: false, error: action.payload.error, jobs: [] }\n        default:\n            return state\n    }\n}\nexport default function useFetchJobs(params, page) {\n    const [state, dispatch] = useReducer(reducer, { jobs: [], loading: true })\n    const filterDescription = (description, state) => {\n        if (description !== \"\") {\n            // make a copy of the state\n            let stateCopy = { ...state }\n            // filter out the state.jobs.description based on params.description\n            stateCopy.jobs = stateCopy.jobs.filter((job) => {\n                return job.title.includes(description)\n            })\n            // save filter results back to state copy\n            console.log(\"stateCopy\", stateCopy)\n            console.log(\"update_has_next_page\", actions.update_has_next_page)\n            return stateCopy\n        }\n        return state\n    }\n    const filterLocation = (location, state) => {\n        if (location !== \"\") {\n            // make a copy of the state\n            let stateCopy = { ...state }\n            // filter out the state.jobs.description based on params.description\n            stateCopy.jobs = stateCopy.jobs.filter((job) => {\n                return job.location.includes(location)\n            })\n            // save filter results back to state copy\n            console.log(stateCopy)\n            return stateCopy\n        }\n        return state\n    }\n    useEffect(() => {\n        const cancelToken1 = axios.CancelToken.source()\n        dispatch({ type: actions.make_request })\n        axios.get(baseUrl, {\n            cancelToken: cancelToken1.token,\n            params: { markdown: true, page: page, ...params }\n        }).then(res => {\n            dispatch({ type: actions.get_data, payload: { jobs: res.data } })\n        }).catch(e => {\n            if (axios.isCancel(e)) return\n            dispatch({ type: actions.error, payload: { error: e } })\n        })\n        return () => {\n            cancelToken1.cancel()\n        }\n    }, [params])\n    let descriptionFiltered = filterDescription(params.description, state);\n    let locationFiltered = filterLocation(params.location, descriptionFiltered);\n    return locationFiltered;\n}"]},"metadata":{},"sourceType":"module"}